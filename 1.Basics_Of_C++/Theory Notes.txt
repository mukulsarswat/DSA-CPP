Programming Basics – Theory Notes
1. User Input / Output

Input: Taking data from the user during program execution (e.g., using cin in C++, scanf in C, or input() in Python).

Output: Displaying data to the user (e.g., using cout in C++, printf in C, or print() in Python).

Important because it allows interaction between the program and the user.

2. Data Types

Define the type of data a variable can store.

Examples:

Integer (int, long) → whole numbers

Floating point (float, double) → decimals

Character (char) → single characters

Boolean (bool) → true/false values

String → collection of characters

Choosing the correct data type is important for memory efficiency and correctness.

3. If-Else Statements

Used for decision-making.

Syntax:

if (condition) {
    // executes if condition is true
} else {
    // executes if condition is false
}


Enables programs to follow different paths based on conditions.

4. Switch Statement

Alternative to multiple if-else conditions.

Works with discrete values (like integers, characters).

Syntax:

switch (expression) {
  case 1: // code
          break;
  case 2: // code
          break;
  default: // code
}


Improves readability when handling many possible values.

5. Arrays and Strings

Array: A collection of elements of the same data type, stored at contiguous memory locations. Example:

int arr[5] = {1,2,3,4,5};


String: A sequence of characters, often implemented as an array of char ending with '\0'. Example:

char str[] = "Hello";


Arrays are used for storing large collections; strings are specifically for text.

6. For Loops

Used to execute a block of code a fixed number of times.

Syntax:

for(initialization; condition; update) {
    // code
}


Example: printing numbers 1 to 5.

for(int i=1; i<=5; i++) {
    cout << i;
}

7. While Loops

Used when the number of iterations is not fixed (depends on condition).

Syntax:

while(condition) {
    // code
}


Example:

int i=1;
while(i<=5) {
    cout << i;
    i++;
}

8. Functions (Pass by Value and Pass by Reference)

Function: A reusable block of code that performs a task.

Pass by Value: Copy of variable is passed → changes inside function don’t affect original variable.

Pass by Reference: Address of variable is passed → changes inside function affect the original variable.

Example:

void funcVal(int x) { x=10; }    // pass by value
void funcRef(int &x) { x=10; }   // pass by reference

9. Time Complexity (Basics)

Time complexity measures how the runtime of an algorithm grows with input size n.

Common complexities:

O(1) → Constant time

O(log n) → Logarithmic

O(n) → Linear

O(n log n) → Linearithmic

O(n²), O(n³) → Polynomial

O(2^n), O(n!) → Exponential (very slow)

Understanding time complexity helps in choosing efficient algorithms.
